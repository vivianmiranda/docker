# INSPIRED https://github.com/jupyter/docker-stacks/tree/master/base-notebook
FROM tensorflow/tensorflow:1.15.2-gpu-py3
MAINTAINER "Vivian Miranda"

############################################################################
# UBUNTU

ARG NB_USER="jovyan"
ARG NB_UID=1000
ARG NB_GID=1000

# Fix DL4006
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

USER root

ENV DEBIAN_FRONTEND noninteractive
RUN add-apt-repository ppa:ubuntu-toolchain-r/test \
  && apt-get update \
  && apt-get install -yq --no-install-recommends \
    emacs-nox \
    git-lfs \
    libpng12-dev \
    fonts-dejavu \
    libhdf5-dev \
    libopenblas-dev \
    liblapack-dev \
    libarpack2-dev \
    unixodbc \
    unixodbc-dev \
    libgtk2.0-dev \
    r-cran-rodbc \
    wget \
    git \
    curl \
    xz-utils \
    libglib2.0-0 \
    nano \
    libfreetype6-dev \
    make \
    gfortran-9 \
    g++-9 \
    gcc-9 \
    cmake \
    python3.7 \
    liblapack-dev \
    libarpack2-dev \
    xz-utils \
    build-essential \
    ffmpeg \
    sudo \
    locales \
    fonts-liberation \
    run-one \
    dvipng \
    mercurial \
    subversion \
    libxrender1 \
    libsm6 \
    libxext6 \
    tzdata \
    unzip \
    vim-tiny \
    texlive-xetex \
    texlive-fonts-recommended \
    texlive-plain-generic \
  && apt-get clean \
  && rm -rf /var/lib/apt/lists/*

# Register the GCC/PYTHON versions in alternatives
RUN update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 9 \
  && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 9 \
  && update-alternatives --install /usr/bin/gfortran gfortran /usr/bin/gfortran-9 9 \
  && update-alternatives --install /usr/bin/python python /usr/bin/python3.7 1 \
  # Set gcc-9/python3 as the default compiler/python
  && update-alternatives --set gcc /usr/bin/gcc-9 \
  && update-alternatives --set g++ /usr/bin/gcc-9 \
  && update-alternatives --set gfortran /usr/bin/gfortran-9 \
  && update-alternatives --set python /usr/bin/python3.7

# Upgrade pip to latest version
RUN curl -s https://bootstrap.pypa.io/get-pip.py -o get-pip.py \
  && python get-pip.py --force-reinstall \
  && rm get-pip.py

RUN echo "en_US.UTF-8 UTF-8" > /etc/locale.gen \
  && locale-gen

# Fix for devtools https://github.com/conda-forge/r-devtools-feedstock/issues/4
RUN ln -s /bin/tar /bin/gtar

# Get protoc 3.0.0, rather than the old version already in the container
# FOR TENSORFLOW OBJECT DETECTION API
RUN curl -OL "https://github.com/google/protobuf/releases/download/v3.0.0/protoc-3.0.0-linux-x86_64.zip" \
  && unzip protoc-3.0.0-linux-x86_64.zip -d proto3 \
  && mv proto3/bin/* /usr/local/bin \
  && mv proto3/include/* /usr/local/include \
  && rm -rf proto3 protoc-3.0.0-linux-x86_64.zip

ENV CONDA_DIR=/opt/conda \
    SHELL=/bin/bash \
    NB_USER=$NB_USER \
    NB_UID=$NB_UID \
    NB_GID=$NB_GID \
    LC_ALL=en_US.UTF-8 \
    LANG=en_US.UTF-8 \
    LANGUAGE=en_US.UTF-8

ENV PATH=$CONDA_DIR/bin:$PATH \
    HOME=/home/$NB_USER

# Copy a script that we will use to correct permissions after running certain commands
COPY fix-permissions /usr/local/bin/fix-permissions
RUN chmod a+rx /usr/local/bin/fix-permissions

# Create NB_USER wtih name jovyan user with UID=1000 and in the 'users' group
# and make sure these dirs are writable by the `users` group.
RUN echo "auth requisite pam_deny.so" >> /etc/pam.d/su \
    && sed -i.bak -e 's/^%admin/#%admin/' /etc/sudoers \
    && sed -i.bak -e 's/^%sudo/#%sudo/' /etc/sudoers \
    && useradd -m -s /bin/bash -N -u $NB_UID $NB_USER \
    && mkdir -p $CONDA_DIR \
    && chown $NB_USER:$NB_GID $CONDA_DIR \
    && chmod g+w /etc/passwd \
    && fix-permissions $HOME \
    fix-permissions $CONDA_DIR

USER $NB_UID
WORKDIR $HOME
ARG PYTHON_VERSION=3.7

# Setup work directory for backward-compatibility
RUN mkdir /home/$NB_USER/work \
    && fix-permissions /home/$NB_USER

############################################################################
# INSTALL CONDA
# Install conda as jovyan and check the md5 sum provided on the download site

USER $NB_UID

ENV MINICONDA_VERSION=4.8.3 \
    MINICONDA_MD5=d63adf39f2c220950a063e0529d4ff74 \
    CONDA_VERSION=4.8.3

WORKDIR /tmp
RUN wget --quiet https://repo.continuum.io/miniconda/Miniconda3-py38_${MINICONDA_VERSION}-Linux-x86_64.sh \
    &&  echo "${MINICONDA_MD5} *Miniconda3-py38_${MINICONDA_VERSION}-Linux-x86_64.sh" | md5sum -c - \
    && /bin/bash Miniconda3-py38_${MINICONDA_VERSION}-Linux-x86_64.sh -f -b -p $CONDA_DIR \
    && rm Miniconda3-py38_${MINICONDA_VERSION}-Linux-x86_64.sh \
    && echo "conda ${CONDA_VERSION}" >> $CONDA_DIR/conda-meta/pinned \
    && conda config --system --prepend channels conda-forge \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    && conda config --system --set channel_priority strict \
    if [ ! $PYTHON_VERSION = 'default' ]; then \
      conda install --yes python=$PYTHON_VERSION; \
    fi \
    && conda list python | grep '^python ' | tr -s ' ' | cut -d '.' -f 1,2 | sed 's/$/.*/' >> $CONDA_DIR/conda-meta/pinned \
    && conda install --quiet --yes conda \
    && conda install --quiet --yes pip \
    && conda update --all --quiet --yes \
    && conda clean --all -f -y \
    && rm -rf /home/$NB_USER/.cache/yarn \
    && fix-permissions $CONDA_DIR \
    && fix-permissions /home/$NB_USER

# Install Tini
RUN conda install --quiet --yes 'tini=0.18.0' \
    && conda list tini | grep tini | tr -s ' ' | cut -d ' ' -f 1,2 >> $CONDA_DIR/conda-meta/pinned \
    && conda clean --all -f -y \
    && fix-permissions $CONDA_DIR \
    && fix-permissions /home/$NB_USER

# Install Packages
# Generate a notebook server config / Cleanup temporary files / Correct permissions
# Do all this in a single RUN command to avoid duplicating all of the
# files across image layers when the permissions change
RUN conda install --quiet --yes \
    'notebook=6.1.3' \
    'jupyterhub=1.1.0' \
    'jupyterlab=2.2.5' \
    'wheel==0.34.2' \
    blaze \
    libpng \
    openblas \
    openblas-devel \
    astropy \
    scipy \
    setuptools \
    'cython=0.29.*' \
    jupyter \
    mpmath \
   'matplotlib-base=3.2.*' \
    GDAL \
    kiwisolver \
    pyparsing \
    pillow= \
    opencv \
    mpi4py \
    numpy \
    mkl \
    'anaconda::tensorflow-gpu=1.15' \
    mkl-devel \
    mkl-include \
    mkl_fft \
    mkl_random \
    emcee \
    keras  \
    keras-preprocessing \
    kaggle \
    imageio \
    fuzzywuzzy \
    pyyaml \
    virtualenv \
    urllib3 \
    descarteslabs \
    pyproj \
    shapely \
    rasterio \
    rtree \
    pyarrow \
    pybind11 \
    geopandas \
    'blas=*=openblas' \
    'bottleneck=1.3.*' \
    'cython=0.29.*' \
    'dask=2.20.*' \
    'dill=0.3.*' \
    'h5py=2.10.*' \
    'hdf5=1.10.*' \
    'seaborn=0.10.*' \
    'statsmodels=0.11.*' \
    'sympy=1.6.*' \
    'vincent=0.4.*' \
    'pytables=3.6.*' \
    'protobuf=3.12.*' \
    'pandas=1.1.*' \
    'numexpr=2.7.*' \
    'numba=0.48.*' \
    'armadillo=9.200.*' \
    'gsl=2.6' \
    'anaconda::libboost' \
    'anaconda::iminuit' \
    'powerai::tokenizers' \
    'cefca::pyfits' \
    'cefca::xz' \
    'eumetsat::fftw3==3.3.*' \
    'eumetsat::cfitsio=3.470' \
    'pytorch::pytorch' \
    'pytorch::torchvision' \
    'pytorch::cpuonly' \
    'scikit-image=0.17.*' \
    'scikit-learn=0.23.*' \
    'widgetsnbextension=3.5.*'\
    'conda-forge::nodejs' \
    'xlrd=1.2.*' \
    'sqlalchemy=1.3.*' \
    'patsy=0.5.*' \
    'ipympl=0.5.*' \
    'esri::arcgis' \
    'cloudpickle=1.5.*' \
  && conda clean --all -f -y \
  && npm cache clean --force \
  && jupyter notebook --generate-config \
  && fix-permissions $CONDA_DIR \
  && fix-permissions /home/$NB_USER

############################################################################
# INSTALL JUPYTER NOTEBOOK

USER $NB_UID

# Jupyter and Tensorboard ports
EXPOSE 8888 6006

# Configure container startup
ENTRYPOINT ["tini", "-g", "--"]
CMD ["start-notebook.sh"]

# Copy local files as late as possible to avoid cache busting
COPY start.sh start-notebook.sh start-singleuser.sh /usr/local/bin/
COPY jupyter_notebook_config.py /etc/jupyter/

# Fix permissions on /etc/jupyter as root
USER root
RUN fix-permissions /etc/jupyter/

USER $NB_UID

RUN jupyter nbextension enable --py widgetsnbextension --sys-prefix \
  # Also activate ipywidgets extension for JupyterLab
  # Check this URL for most recent compatibilities
  # https://github.com/jupyter-widgets/ipywidgets/tree/master/packages/jupyterlab-manager
  && jupyter labextension install @jupyter-widgets/jupyterlab-manager@^2.0.0 --no-build \
  && jupyter labextension install @bokeh/jupyter_bokeh@^2.0.0 --no-build \
  && jupyter labextension install @jupyter-matplotlib@^0.7.2 --no-build \
  && jupyter labextension install @jupyterlab/geojson-extension --no-build \
  && jupyter labextension install @jupyterlab/mathjax3-extension --no-build \
  && jupyter labextension install @jupyterlab/latex --no-build \
  && jupyter labextension install @jupyterlab/git --no-build \
  && jupyter lab build -y \
  && jupyter lab clean -y \
  && npm cache clean --force \
  && rm -rf "/home/${NB_USER}/.cache/yarn" \
  && rm -rf "/home/${NB_USER}/.node-gyp" \
  && fix-permissions "${CONDA_DIR}" \
  && fix-permissions "/home/${NB_USER}"

WORKDIR /tmp
RUN git clone https://github.com/PAIR-code/facets.git \
  && jupyter nbextension install facets/facets-dist/ --sys-prefix \
  && rm -rf /tmp/facets \
  && fix-permissions "${CONDA_DIR}" \
  && fix-permissions "/home/${NB_USER}"

############################################################################
# INSTALL PYTHON PACKAGES

USER $NB_UID

RUN pip3 install --quiet --no-cache-dir --use-feature=2020-resolver \
    'tensorflow==2.2.0' \
    'GetDist==1.1.2' \
    'Py-BOBYQA==1.2' \
    'imutils' \
  && fix-permissions "${CONDA_DIR}" \
  && fix-permissions "/home/${NB_USER}"

# Import matplotlib the first time to build the font cache.
ENV XDG_CACHE_HOME="/home/${NB_USER}/.cache/"

RUN MPLBACKEND=Agg python -c "import matplotlib.pyplot" \
  && fix-permissions "/home/${NB_USER}"

############################################################################
# INSTALL TENSOR FLOW OBJECT DETECTION API
# INSPIRED BY: https://towardsdatascience.com/deploy-tensorflow-object-detection-api-on-kubernetes-with-python-flask-and-docker-7a9513dd19e4

RUN mkdir /tensorflow/models \
  && fix-permissions /tensorflow/

RUN git clone https://github.com/tensorflow/models.git /tensorflow/models \
  && fix-permissions /tensorflow/

# Run protoc on the object detection repo
RUN cd  /tensorflow/models/research && \
    protoc object_detection/protos/*.proto --python_out=. \
    && fix-permissions /tensorflow/

Set the PYTHONPATH to finish installing the API
ENV PYTHONPATH=$PYTHONPATH:/tensorflow/models/research/object_detection
ENV PYTHONPATH=$PYTHONPATH:/tensorflow/models/research/slim
ENV PYTHONPATH=$PYTHONPATH:/tensorflow/models/research

############################################################################
# CONCLUSION

USER $NB_UID

WORKDIR $HOME